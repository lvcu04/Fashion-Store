const Cart = require("../models/Cart");
const { Product } = require("../models/Product");

const CartController = {
  // 1. L·∫•y gi·ªè h√†ng theo user
   getCartByUser: async (req, res) => {
        const { uid } = req.user;
        
        if(!uid) {
            return res.status(400).json({ error: 'User ID is required' });
        }
        try {
        // console.log("UID nh·∫≠n ƒë∆∞·ª£c:", uid);
        const cart = await Cart.findOne({ uid });
        // console.log("Cart t√¨m ƒë∆∞·ª£c:", cart);
        res.status(200).json(cart || { uid, items: [] });
    } catch (error) {
        console.error("L·ªói khi getCart:", error);
        res.status(500).json({ error: "L·ªói server khi l·∫•y gi·ªè h√†ng" });
    }
},
  // 2. C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
  updateCartItem: async (req, res) => {
  const { uid } = req.user;
  const { product_id, quantity } = req.body;

  console.log("üëâ [updateCartItem] Request body:", req.body);

  if (!product_id || typeof quantity !== "number") {
    console.warn("‚ö†Ô∏è Thi·∫øu ho·∫∑c sai d·ªØ li·ªáu ƒë·∫ßu v√†o");
    return res.status(400).json({ error: "Thi·∫øu ho·∫∑c sai d·ªØ li·ªáu ƒë·∫ßu v√†o" });
  }

  try {
    const product = await Product.findOne({ product_id });
    if (!product) {
      console.warn("‚ùå S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i:", product_id);
      return res.status(404).json({ error: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
    }

    if (quantity > product.stock) {
      console.warn(`‚ùå V∆∞·ª£t qu√° t·ªìn kho: y√™u c·∫ßu ${quantity}, kho c√≤n ${product.stock}`);
      return res.status(400).json({ error: "V∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªìn kho" });
    }

    const cart = await Cart.findOne({ uid });
    if (!cart) {
      console.warn("‚ùå Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng cho uid:", uid);
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    const item = cart.items.find(i => i.product_id === product_id);
    if (!item) {
      console.warn("‚ùå S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè:", product_id);
      return res.status(404).json({ error: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè" });
    }

    if (quantity > 0) {
      console.log(`‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m ${product_id} s·ªë l∆∞·ª£ng t·ª´ ${item.quantity} ‚Üí ${quantity}`);
      item.quantity = quantity;
    } else {
      console.log(`üóëÔ∏è Xo√° s·∫£n ph·∫©m ${product_id} kh·ªèi gi·ªè`);
      cart.items = cart.items.filter(i => i.product_id !== product_id);
    }

    await cart.save();
    console.log("‚úÖ Gi·ªè h√†ng sau c·∫≠p nh·∫≠t:", cart.items);

    return res.status(200).json({ message: "C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng:", err);
    return res.status(500).json({ error: "L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t gi·ªè h√†ng" });
  }
},




  // 3. Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
  addToCart: async (req, res) => {
  const { uid } = req.user;
  let items = [];

  console.log("üëâ addToCart Request body:", req.body);

  if (Array.isArray(req.body.items)) {
    items = req.body.items;
  } else if (req.body.product_id) {
    const { product_id, productName, image, price, quantity } = req.body;
    items = [{ product_id, productName, image, price, quantity }];
  } else {
    console.warn("‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu s·∫£n ph·∫©m");
    return res.status(400).json({ error: "Thi·∫øu d·ªØ li·ªáu s·∫£n ph·∫©m" });
  }

  try {
    let cart = await Cart.findOne({ uid });
    if (!cart) {
      console.log("üõí Ch∆∞a c√≥ gi·ªè h√†ng, t·∫°o m·ªõi cho uid:", uid);
      cart = new Cart({ uid, items: [] });
    }

    for (const newItem of items) {
      const { product_id, productName, image, price, quantity } = newItem;
      if (!product_id || quantity <= 0) {
        console.warn("‚ö†Ô∏è B·ªè qua s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá:", newItem);
        continue;
      }

      const existing = cart.items.find(i => i.product_id === product_id);
      if (existing) {
        console.log(`üîÅ TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ${product_id} t·ª´ ${existing.quantity} ‚Üí ${existing.quantity + quantity}`);
        existing.quantity += quantity;
      } else {
        console.log(`üÜï Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè:`, newItem);
        cart.items.push({ product_id, productName, image, price, quantity });
      }
    }

    await cart.save();
    console.log("‚úÖ Gi·ªè h√†ng sau khi th√™m:", cart.items);

    res.status(200).json({ items: cart.items });
  } catch (err) {
    console.error("‚ùå L·ªói khi th√™m v√†o gi·ªè:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m" });
  }
},





  // 4. Xo√° m·ªôt s·∫£n ph·∫©m kh·ªèi gi·ªè
  removeFromCart: async (req, res) => {
    const { uid } = req.user; // uid ƒë∆∞·ª£c l·∫•y t·ª´ token (middleware)
    const { product_id } = req.params;

    try {
      const cart = await Cart.findOne({ uid });
      if (!cart) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
      }

      const exists = cart.items.some((i) => i.product_id === product_id);
      if (!exists) {
        return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè" });
      }

      // Xo√° s·∫£n ph·∫©m kh·ªèi m·∫£ng items
      cart.items = cart.items.filter((i) => i.product_id !== product_id);

      await cart.save();
      return res.status(200).json({ message: "ƒê√£ xo√° s·∫£n ph·∫©m", cart });
    } catch (err) {
      console.error("L·ªói delete:", err);
      return res.status(500).json({ error: "Kh√¥ng th·ªÉ xo√° s·∫£n ph·∫©m" });
    }
  },
 
};

module.exports = CartController;