import React, {
  createContext,
  useContext,
  useEffect,
  useState,
  ReactNode,
} from "react";
import { Alert } from "react-native";
import { API } from "@/constants/api";
import { useAuth } from "@/context/authContext";
import { router } from "expo-router";

// Ki·ªÉu d·ªØ li·ªáu
interface Address {
  _id: string;
  street: string;
  city: string;
  receiverName: string;
}

type PaymentMethodType = "COD" | "MOMO";

interface PaymentMethod {
  _id: string;
  type: PaymentMethodType;
  isDefault: boolean;
}

// Context type
interface CheckoutContextType {
  // Address
  addresses: Address[];
  selectedAddress: Address | null;
  handleSelectAddress: (address: Address) => void;
  fetchAddresses: () => Promise<void>;
  addAddress: (newAddress: Omit<Address, "_id">) => Promise<void>;
  updateAddress: (address: Address) => Promise<void>;
  removeAddress: (id: string) => Promise<void>;

  // Payment
  methods: PaymentMethod[];
  selectedPaymentMethod: PaymentMethodType | null;
  fetchPaymentMethods: () => Promise<void>;
  fetchDefaultPaymentMethod: () => Promise<void>;
  handleSelectMethod: (type: PaymentMethodType) => Promise<void>;
  resetCheckoutContext: () => void;
}

// T·∫°o context
const CheckoutContext = createContext<CheckoutContextType | undefined>(undefined);

// Provider
export const CheckoutProvider = ({ children }: { children: ReactNode }) => {
  const { firebaseUser } = useAuth();

  // State
  const [addresses, setAddresses] = useState<Address[]>([]);
  const [selectedAddress, setSelectedAddress] = useState<Address | null>(null);

  const [methods, setMethods] = useState<PaymentMethod[]>([]);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<PaymentMethodType | null>(null);

  // üìå ADDRESS
  const fetchAddresses = async () => {
    try {
      const token = await firebaseUser?.getIdToken();
      const res = await fetch(API.user.getAddress, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });
      const data: Address[] = await res.json();
      setAddresses(data);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫£i ƒë·ªãa ch·ªâ:", err);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªãa ch·ªâ.");
    }
  };

  const addAddress = async (newAddress: Omit<Address, "_id">) => {//d√≤ng n√†y khai b√°o newAddress l√† m·ªôt ƒë·ªëi t∆∞·ª£ng kh√¥ng c√≥ tr∆∞·ªùng _id
    try {
      const token = await firebaseUser?.getIdToken();
      const res = await fetch(API.user.createAddress, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ address: newAddress }),//djch t·ª´ obj th√†nh json ƒë·ªÉ server hi·ªÉu
      });

      if (!res.ok) throw new Error("Th√™m ƒë·ªãa ch·ªâ th·∫•t b·∫°i");

      await fetchAddresses(); // c·∫≠p nh·∫≠t l·∫°i danh s√°ch
    } catch (err) {
      console.error("‚ùå L·ªói th√™m ƒë·ªãa ch·ªâ:", err);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ th√™m ƒë·ªãa ch·ªâ.");
    }
  };
  //cakap nh·∫≠t ƒë·ªãa ch·ªâ
  const updateAddress = async (address: Address) => {
    try {
      const token = await firebaseUser?.getIdToken();
      const res = await fetch(API.user.updateAddress, {
        method: "PUT",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ address }),
      });

      if (!res.ok) throw new Error("C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ th·∫•t b·∫°i");

      await fetchAddresses(); // c·∫≠p nh·∫≠t l·∫°i danh s√°ch
    } catch (err) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ:", err);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ.");
    }
  };

  const removeAddress = async (id: string) => {
    Alert.alert("X√°c nh·∫≠n xo√°", "B·∫°n c√≥ ch·∫Øc mu·ªën xo√° ƒë·ªãa ch·ªâ n√†y?", [
      { text: "Hu·ª∑", style: "cancel" },
      {
        text: "Xo√°",
        style: "destructive",
        onPress: async () => {
          try {
            const token = await firebaseUser?.getIdToken();
            const res = await fetch(API.user.removeAddress, {
              method: "DELETE",
              headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ address: [{ _id: id }] }),
            });

            if (!res.ok) throw new Error("Xo√° ƒë·ªãa ch·ªâ th·∫•t b·∫°i");

            setAddresses((prev) => prev.filter((a) => a._id !== id));
            if (selectedAddress?._id === id) setSelectedAddress(null);
          } catch (err) {
            console.error("‚ùå L·ªói xo√° ƒë·ªãa ch·ªâ:", err);
            Alert.alert("L·ªói", "Kh√¥ng th·ªÉ xo√° ƒë·ªãa ch·ªâ.");
          }
        },
      },
    ]);
  };

  const handleSelectAddress = (address: Address) => {
    setSelectedAddress(address);
    router.push("/(checkout)/checkout");
  };

  // üìå PAYMENT METHOD

 const fetchPaymentMethods = async () => {
  try {
    const token = await firebaseUser?.getIdToken();
    const res = await fetch(API.user.getPaymentMethod, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    if (!res.ok) throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch ph∆∞∆°ng th·ª©c");

    const data = await res.json();//ƒë·ªçc d·ªØ li·ªáu t·ª´ response
    const methods = data.paymentMethod;

    setMethods(methods);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y ph∆∞∆°ng th·ª©c thanh to√°n:", err);
    Alert.alert("L·ªói", "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n.");
  }
};
// L·∫•y ph∆∞∆°ng th·ª©c thanh to√°n m·∫∑c ƒë·ªãnh
const fetchDefaultPaymentMethod = async () => {
  try {
    const token = await firebaseUser?.getIdToken();
    const res = await fetch(API.user.getPaymentMethodSetTrue, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    if (!res.ok) throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c ph∆∞∆°ng th·ª©c m·∫∑c ƒë·ªãnh");

    const data = await res.json();
    const defaultMethod = data.defaultPaymentMethod;

    setSelectedPaymentMethod(defaultMethod?.type || null);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y ph∆∞∆°ng th·ª©c m·∫∑c ƒë·ªãnh:", err);
    Alert.alert("L·ªói", "Kh√¥ng th·ªÉ l·∫•y ph∆∞∆°ng th·ª©c thanh to√°n m·∫∑c ƒë·ªãnh.");
  }
};



  //h√†m update ph∆∞∆°ng th·ª©c thanh to√°n thong qua tr∆∞·ªùng isDefault. Khi ch·ªçn th√¨ s·∫Ω set true
  const handleSelectMethod = async (type: PaymentMethodType) => {
    try {
      const token = await firebaseUser?.getIdToken();
      const selected = methods.find((m) => m.type === type);
      if (!selected) throw new Error("Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c n√†y");

      const res = await fetch(API.user.updatePaymentMethod, {
        method: "PUT",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          paymentMethod: {
            type: selected.type,
            isDefault: true,
          },
        }),
      });


      const data = await res.json();
      if (!res.ok) {
        console.error("‚ùå L·ªói chi ti·∫øt t·ª´ backend:", data);
        throw new Error(data.message || "C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c th·∫•t b·∫°i");
      }


      const updated = data.paymentMethod;
      setMethods(updated);
      setSelectedPaymentMethod(type);
      router.push("/(checkout)/checkout");
    } catch (err: any) {
      console.error("‚ùå Error trong handleSelectMethod:", err);
      Alert.alert("L·ªói", err.message || "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.");
    }
  };
  //h√†m reset checkout context khi logout
  const resetCheckoutContext = () => {
    setAddresses([]);
    setSelectedAddress(null);
    setMethods([]);
    setSelectedPaymentMethod(null);
  };

  useEffect(() => {
    setSelectedAddress(null);
  }, []);

  return (
    <CheckoutContext.Provider
      value={{
        addresses,
        selectedAddress,
        fetchAddresses,
        addAddress,
        updateAddress,
        removeAddress,
        handleSelectAddress,

        methods,
        selectedPaymentMethod,
        fetchPaymentMethods,
        fetchDefaultPaymentMethod,
        handleSelectMethod,
        resetCheckoutContext
      }}
    >
      {children}
    </CheckoutContext.Provider>
  );
};

export const useCheckout = () => {
  const context = useContext(CheckoutContext);
  if (!context) throw new Error("useCheckout ph·∫£i ƒë∆∞·ª£c d√πng trong CheckoutProvider");
  return context;
};
